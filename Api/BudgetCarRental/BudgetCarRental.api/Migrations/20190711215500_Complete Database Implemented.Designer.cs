// <auto-generated />
using System;
using BudgetCarRental.api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BudgetCarRental.api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190711215500_Complete Database Implemented")]
    partial class CompleteDatabaseImplemented
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("BudgetCarRental.Model.Model.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("House");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Road");

                    b.Property<string>("State");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.AppUser", b =>
                {
                    b.Property<int>("AppUserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<DateTime?>("JoinDate");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Role");

                    b.HasKey("AppUserId");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Detail");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AppUserId");

                    b.Property<string>("CustomerType");

                    b.Property<string>("OrganizationName");

                    b.Property<string>("UsinqId");

                    b.HasKey("CustomerId");

                    b.HasIndex("AppUserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.CustomerAddress", b =>
                {
                    b.Property<int>("AddressId");

                    b.Property<int>("CustomerId");

                    b.HasKey("AddressId", "CustomerId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.CustomerContact", b =>
                {
                    b.Property<int>("ContactId");

                    b.Property<int>("CustomerId");

                    b.HasKey("ContactId", "CustomerId");

                    b.ToTable("CustomerContacts");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.CustomerPhoto", b =>
                {
                    b.Property<int>("PhotoId");

                    b.Property<int>("CustomerId");

                    b.HasKey("PhotoId", "CustomerId");

                    b.ToTable("CustomerPhotos");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.Driver", b =>
                {
                    b.Property<int>("DriverId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AppUserId");

                    b.Property<string>("InsuranceNumber");

                    b.Property<bool>("IsAvailable");

                    b.Property<string>("UsinqId");

                    b.HasKey("DriverId");

                    b.HasIndex("AppUserId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.DriverAddress", b =>
                {
                    b.Property<int>("AddressId");

                    b.Property<int>("DriverId");

                    b.HasKey("AddressId", "DriverId");

                    b.ToTable("DriverAddresses");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.DriverContact", b =>
                {
                    b.Property<int>("ContactId");

                    b.Property<int>("DriverId");

                    b.HasKey("ContactId", "DriverId");

                    b.ToTable("DriverContacts");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.DriverPayment", b =>
                {
                    b.Property<int>("PaymentId");

                    b.Property<int>("DriverId");

                    b.HasKey("PaymentId", "DriverId");

                    b.ToTable("DriverPayments");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.DriverPhoto", b =>
                {
                    b.Property<int>("PhotoId");

                    b.Property<int>("DriverId");

                    b.HasKey("PhotoId", "DriverId");

                    b.ToTable("DriverPhotos");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AppUserId");

                    b.Property<string>("DepartmentName");

                    b.Property<bool>("IsAvailable");

                    b.Property<string>("UsinqId");

                    b.HasKey("EmployeeId");

                    b.HasIndex("AppUserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.EmployeeAddress", b =>
                {
                    b.Property<int>("AddressId");

                    b.Property<int>("EmployeeId");

                    b.HasKey("AddressId", "EmployeeId");

                    b.ToTable("EmployeeAddresses");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.EmployeeContact", b =>
                {
                    b.Property<int>("ContactId");

                    b.Property<int>("EmployeeId");

                    b.HasKey("ContactId", "EmployeeId");

                    b.ToTable("EmployeeContacts");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.EmployeePhoto", b =>
                {
                    b.Property<int>("PhotoId");

                    b.Property<int>("EmployeeId");

                    b.HasKey("PhotoId", "EmployeeId");

                    b.ToTable("EmployeePhotos");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.Fleet", b =>
                {
                    b.Property<int>("FleetId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CustomerId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("FleetId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Fleets");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.FleetPayment", b =>
                {
                    b.Property<int>("PaymentId");

                    b.Property<int>("FleetId");

                    b.HasKey("PaymentId", "FleetId");

                    b.ToTable("FleetPayments");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.Parts", b =>
                {
                    b.Property<int>("PartsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PartsCode");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("PartsId");

                    b.ToTable("Parts");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.PartsForRepair", b =>
                {
                    b.Property<int>("PartsId");

                    b.Property<int>("RepairId");

                    b.HasKey("PartsId", "RepairId");

                    b.HasIndex("RepairId");

                    b.ToTable("PartsForRepairs");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.PartsPhoto", b =>
                {
                    b.Property<int>("PartsId");

                    b.Property<int>("PhotoId");

                    b.Property<int?>("PhotoId1");

                    b.HasKey("PartsId", "PhotoId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("PhotoId1");

                    b.ToTable("PartsPhotos");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("PaymentDate");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsMain");

                    b.Property<string>("PhotoUrl");

                    b.HasKey("PhotoId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.RentalArrangement", b =>
                {
                    b.Property<int>("RentalArrangementId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ArrangementType");

                    b.Property<int?>("DriverId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<int?>("VehicleId");

                    b.HasKey("RentalArrangementId");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("RentalArrangements");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.RepairSession", b =>
                {
                    b.Property<int>("RepairSessionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("RentalArrangementId");

                    b.Property<DateTime?>("RepairDate");

                    b.HasKey("RepairSessionId");

                    b.HasIndex("RentalArrangementId");

                    b.ToTable("RepairSessions");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.RepairingEmployee", b =>
                {
                    b.Property<int>("EmployeeId");

                    b.Property<int>("RepairId");

                    b.HasKey("EmployeeId", "RepairId");

                    b.HasIndex("RepairId");

                    b.ToTable("RepairingEmployees");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Model");

                    b.Property<string>("RegNo")
                        .IsRequired();

                    b.Property<string>("Type");

                    b.HasKey("VehicleId");

                    b.HasAlternateKey("RegNo");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.VehicleDescription", b =>
                {
                    b.Property<int>("VehicleDescriptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int?>("VehicleId");

                    b.HasKey("VehicleDescriptionId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehcileDescriptions");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.VehicleFleet", b =>
                {
                    b.Property<int>("VehicleId");

                    b.Property<int>("FleetId");

                    b.HasKey("VehicleId", "FleetId");

                    b.ToTable("VehicleFleets");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.VehiclePhoto", b =>
                {
                    b.Property<int>("VehicleID");

                    b.Property<int>("PhotoId");

                    b.Property<int?>("PhotoId1");

                    b.HasKey("VehicleID", "PhotoId");

                    b.HasIndex("PhotoId");

                    b.HasIndex("PhotoId1");

                    b.ToTable("VehcilePhotos");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.Customer", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.CustomerAddress", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.Address", "Address")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BudgetCarRental.Model.Model.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.CustomerContact", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.Contact", "Contact")
                        .WithMany("CustomerContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BudgetCarRental.Model.Model.Customer", "Customer")
                        .WithMany("CustomerContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.CustomerPhoto", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.Customer", "Customer")
                        .WithMany("CustomerPhotos")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BudgetCarRental.Model.Model.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.Driver", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.DriverAddress", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.Address", "Address")
                        .WithMany("DriverAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BudgetCarRental.Model.Model.Driver", "Driver")
                        .WithMany("DriverAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.DriverContact", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.Contact", "Contact")
                        .WithMany("DriverContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BudgetCarRental.Model.Model.Driver", "Driver")
                        .WithMany("DriverContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.DriverPayment", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.Driver", "Driver")
                        .WithMany("DriverPayments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BudgetCarRental.Model.Model.Payment", "Payment")
                        .WithMany("DriverPayments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.DriverPhoto", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.Driver", "Driver")
                        .WithMany("DriverPhotos")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BudgetCarRental.Model.Model.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.Employee", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.EmployeeAddress", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BudgetCarRental.Model.Model.Employee", "Employee")
                        .WithMany("EmployeeAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.EmployeeContact", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BudgetCarRental.Model.Model.Employee", "Employee")
                        .WithMany("EmployeeContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.EmployeePhoto", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.Employee", "Employee")
                        .WithMany("EmployeePhotos")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BudgetCarRental.Model.Model.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.Fleet", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.FleetPayment", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.Fleet", "Fleet")
                        .WithMany("FleetPayments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BudgetCarRental.Model.Model.Payment", "Payment")
                        .WithMany("FleetPayments")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.PartsForRepair", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.RepairSession", "RepairSession")
                        .WithMany("PartsForRepairs")
                        .HasForeignKey("PartsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BudgetCarRental.Model.Model.Parts", "Parts")
                        .WithMany("PartsForRepairs")
                        .HasForeignKey("RepairId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.PartsPhoto", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.Parts", "Parts")
                        .WithMany("PartsPhotos")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BudgetCarRental.Model.Model.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId1");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.RentalArrangement", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.Driver", "Driver")
                        .WithMany("RentalArrangements")
                        .HasForeignKey("DriverId");

                    b.HasOne("BudgetCarRental.Model.Model.Vehicle", "Vehicle")
                        .WithMany("RentalArrangements")
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.RepairSession", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.RentalArrangement", "RentalArrangement")
                        .WithMany()
                        .HasForeignKey("RentalArrangementId");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.RepairingEmployee", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.RepairSession", "RepairSession")
                        .WithMany("RepairingEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BudgetCarRental.Model.Model.Employee", "Employee")
                        .WithMany("RepairingEmployees")
                        .HasForeignKey("RepairId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.VehicleDescription", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.Vehicle", "Vehicle")
                        .WithMany("Descriptions")
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.VehicleFleet", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.Fleet", "Fleet")
                        .WithMany("VehicleFleets")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BudgetCarRental.Model.Model.Vehicle", "Vehicle")
                        .WithMany("VehicleFleets")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BudgetCarRental.Model.Model.VehiclePhoto", b =>
                {
                    b.HasOne("BudgetCarRental.Model.Model.Vehicle", "Vehicle")
                        .WithMany("VehiclePhotos")
                        .HasForeignKey("PhotoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BudgetCarRental.Model.Model.Photo", "Photo")
                        .WithMany()
                        .HasForeignKey("PhotoId1");
                });
#pragma warning restore 612, 618
        }
    }
}
